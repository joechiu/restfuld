#!/usr/bin/perl 
=head1 Description
This is a lite RESTful server developed by Perl. It is capable of handling data format in JSON, XML and text. 
YAML not supported yet.
The restful log: /tmp/restful-yyyymmdd.log by default
=cut

use strict;
use DBI;
use HTTP::Daemon;
use HTTP::Daemon::SSL;
use HTTP::Status;
use POSIX qw/strftime/;
use JSON;
use XML::Simple qw(:strict);    # replace this module if paring XML becomes complicated
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use lib '/srv/restful/lib';
use u;

use constant TIMEOUT	=> 300; # timeout for processing each request
use constant PORT	=> 34780;
use constant SSL_PORT	=> 34743;
use constant LISTEN	=> 25;
use constant SSL_KEY	=> '/etc/ssl.key';
use constant SSL_CERT	=> '/etc/ssl.crt';

my (
    $verbose, $help, $man, $server, 
    $port, $listen, $ssl
);
 
GetOptions (
    'verbose|v+'    => \$verbose,
    'help|?'        => \$help,
    'man|m'         => \$man,
    'port=s'        => \$port,
    'listen|i'      => \$listen,
    'ssl|s'         => \$ssl,
    'log=s'         => \$log,
) or pod2usage(2);

print "More details in GitHub: https://github.com/joechiu/restfuld/blob/master/README.md\n" and exit if $help;
pod2usage( -existstatus => 0, -verbose => 2 ) if $man; 

my $d;

=head1 Installation 
Self signed certificate: Cannot install the package due to the inproper repository disabled the SSL connection.
Will be enabled till the package is ready for self signed certificate
=cut

if ($ssl) {
    $d = HTTP::Daemon::SSL->new(
        LocalPort       => $port || SSL_PORT,
        Listen          => $listen || LISTEN,
        Proto           => 'tcp',
        Reuse           => 1,
        SSL_server      => 1,
        SSL_verify_mode => 0x00, # no client authentication
        SSL_key_file    => SSL_KEY,
        SSL_cert_file   => SSL_CERT,
    );
} else {
    $d = HTTP::Daemon->new(
        LocalPort       => $port ||= PORT,
        Listen          => $listen || LISTEN,
        Reuse           => 1,
        Proto           => 'tcp',
    );
}

$d || do { logit "Can't create RESTful server($port): $!"; die };

logit( "RESTful server starts($port)..." );

$SIG{CHLD} = 'IGNORE';  # ignore if child died timeout or normally

while (my $c = $d->accept) {

    if (my $pid = fork) {
	$c->close();
	next;
    }

    # child
    $c->sockopt(SO_KEEPALIVE, 1);
    # the whole connetion from each client must be done in 300 seconds!
    $c->timeout(TIMEOUT); 

    while (my $r = $c->get_request) {
	    
	require Server;
	my $type = _init($r, $c->peerhost());		

	# currently supports GET and POST
	# you may add PUT and DELETE if want 
	if ($r->method =~ /^(GET|POST)/) {

	    my $res = _res($type, $r->content);
	    $c->send_response($res);

	} else {
	    $c->send_error(RC_FORBIDDEN)
	}
   }
   exit(0);
}

__END__

